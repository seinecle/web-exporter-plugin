/*
 * author: Cl√©ment Levallois
 */
package net.clementlevallois.web.exports.plugin.controller;

import com.google.gson.JsonObject;
import java.util.prefs.Preferences;
import javax.swing.JCheckBox;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import org.openide.util.NbPreferences;

/**
 *
 * @author LEVALLOIS
 */
public class JPanelWebExport extends javax.swing.JPanel {

    private JsonObject responseGithubConnectAction;

    /**
     * Creates new form JPanelWebExport
     */
    public JPanelWebExport() {
        initComponents();
        jTextFieldUserCode.setVisible(false);
    }

    public JTextField getjTextFieldUserCode() {
        return jTextFieldUserCode;
    }

    public JsonObject getResponseGithubConnectAction() {
        return responseGithubConnectAction;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabs = new javax.swing.JTabbedPane();
        tabGithub = new javax.swing.JPanel();
        jButtonGithubConnect = new javax.swing.JButton();
        jLabelPromptUserCode = new javax.swing.JLabel();
        jTextFieldUserCode = new javax.swing.JTextField();
        jLabelPromptWebsiteLogin = new javax.swing.JLabel();
        jTextFieldWebsiteLoginUrl = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldGithubErrorMsg = new javax.swing.JTextField();

        org.openide.awt.Mnemonics.setLocalizedText(jButtonGithubConnect, org.openide.util.NbBundle.getMessage(JPanelWebExport.class, "JPanelWebExport.jButtonGithubConnect.text")); // NOI18N
        jButtonGithubConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGithubConnectActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabelPromptUserCode, org.openide.util.NbBundle.getMessage(JPanelWebExport.class, "JPanelWebExport.jLabelPromptUserCode.text")); // NOI18N

        jTextFieldUserCode.setText(org.openide.util.NbBundle.getMessage(JPanelWebExport.class, "JPanelWebExport.jTextFieldUserCode.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabelPromptWebsiteLogin, org.openide.util.NbBundle.getMessage(JPanelWebExport.class, "JPanelWebExport.jLabelPromptWebsiteLogin.text")); // NOI18N

        jTextFieldWebsiteLoginUrl.setText(org.openide.util.NbBundle.getMessage(JPanelWebExport.class, "JPanelWebExport.jTextFieldWebsiteLoginUrl.text")); // NOI18N
        jTextFieldWebsiteLoginUrl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldWebsiteLoginUrlActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(JPanelWebExport.class, "JPanelWebExport.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(JPanelWebExport.class, "JPanelWebExport.jLabel2.text")); // NOI18N

        jTextFieldGithubErrorMsg.setForeground(new java.awt.Color(255, 0, 0));
        jTextFieldGithubErrorMsg.setText(org.openide.util.NbBundle.getMessage(JPanelWebExport.class, "JPanelWebExport.jTextFieldGithubErrorMsg.text")); // NOI18N

        javax.swing.GroupLayout tabGithubLayout = new javax.swing.GroupLayout(tabGithub);
        tabGithub.setLayout(tabGithubLayout);
        tabGithubLayout.setHorizontalGroup(
            tabGithubLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabGithubLayout.createSequentialGroup()
                .addGroup(tabGithubLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabGithubLayout.createSequentialGroup()
                        .addGap(207, 207, 207)
                        .addComponent(jButtonGithubConnect))
                    .addGroup(tabGithubLayout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addGroup(tabGithubLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tabGithubLayout.createSequentialGroup()
                                .addComponent(jLabelPromptWebsiteLogin)
                                .addGap(18, 18, 18)
                                .addComponent(jTextFieldWebsiteLoginUrl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(tabGithubLayout.createSequentialGroup()
                                .addComponent(jLabelPromptUserCode)
                                .addGap(18, 18, 18)
                                .addComponent(jTextFieldUserCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)))
                    .addGroup(tabGithubLayout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(jTextFieldGithubErrorMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(613, Short.MAX_VALUE))
        );
        tabGithubLayout.setVerticalGroup(
            tabGithubLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabGithubLayout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jButtonGithubConnect)
                .addGap(36, 36, 36)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabGithubLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPromptUserCode)
                    .addComponent(jTextFieldUserCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabGithubLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPromptWebsiteLogin)
                    .addComponent(jTextFieldWebsiteLoginUrl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(74, 74, 74)
                .addComponent(jTextFieldGithubErrorMsg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(82, Short.MAX_VALUE))
        );

        tabs.addTab(org.openide.util.NbBundle.getMessage(JPanelWebExport.class, "JPanelWebExport.tabGithub.TabConstraints.tabTitle"), tabGithub); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(tabs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldWebsiteLoginUrlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldWebsiteLoginUrlActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldWebsiteLoginUrlActionPerformed

    private void jButtonGithubConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGithubConnectActionPerformed
        responseGithubConnectAction = PublishingActions.connectToGithub();
        if (!responseGithubConnectAction.has("user_code")) {
            jTextFieldGithubErrorMsg.setText("error retrieving your user code");
            return;
        } else {
            String userCode = responseGithubConnectAction.getAsJsonArray("user_code").getAsString();
            String deviceCode = responseGithubConnectAction.getAsJsonArray("device_code").getAsString();
            jTextFieldUserCode.setVisible(true);
            jTextFieldUserCode.setText(userCode);
            JsonObject resultGithubPolling = PublishingActions.pollGithubToCheckForUserAuth(deviceCode);
            if (resultGithubPolling.has("access_token")) {
                String access_token = resultGithubPolling.get("access_token").getAsString();
                Preferences preferences = NbPreferences.forModule(this.getClass());
                preferences.put("access_token", access_token);
            } else {
                jTextFieldGithubErrorMsg.setText("error - the user code was not entered on Github");
                return;
            }
            JsonObject jsonObjectOfGexfAsStringRetrieval = PublishingActions.getGexfAsString();
            if (!jsonObjectOfGexfAsStringRetrieval.has("200")) {
                if (!jsonObjectOfGexfAsStringRetrieval.keySet().isEmpty()) {
                    String errorKey = jsonObjectOfGexfAsStringRetrieval.keySet().iterator().next();
                    jTextFieldGithubErrorMsg.setText(jsonObjectOfGexfAsStringRetrieval.get(errorKey).getAsString());
                } else {
                    jTextFieldGithubErrorMsg.setText("unspecified error when retrieving gexf of current network");
                }
            } else {
                String gexf = jsonObjectOfGexfAsStringRetrieval.getAsJsonArray("200").getAsString();
                Preferences preferences = NbPreferences.forModule(this.getClass());
                String accessToken = preferences.get("access_token", "");
                if (accessToken.isBlank()) {
                    jTextFieldGithubErrorMsg.setText("error retrieving access token from user preferences");
                } else {
                    PublishingActions.postGexfToGist(gexf, accessToken);
                }
            }
        }
    }//GEN-LAST:event_jButtonGithubConnectActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonGithubConnect;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelPromptUserCode;
    private javax.swing.JLabel jLabelPromptWebsiteLogin;
    private javax.swing.JTextField jTextFieldGithubErrorMsg;
    private javax.swing.JTextField jTextFieldUserCode;
    private javax.swing.JTextField jTextFieldWebsiteLoginUrl;
    private javax.swing.JPanel tabGithub;
    private javax.swing.JTabbedPane tabs;
    // End of variables declaration//GEN-END:variables
}
